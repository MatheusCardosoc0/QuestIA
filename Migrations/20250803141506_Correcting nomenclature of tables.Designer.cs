// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestIA.Infra.Database;

#nullable disable

namespace QuestIA.Migrations
{
    [DbContext(typeof(QuestIAContext))]
    [Migration("20250803141506_Correcting nomenclature of tables")]
    partial class Correctingnomenclatureoftables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestIA.Core.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsCheck")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("AutoSubmitOnTimeout")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRandom")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("QuantityQuestions")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("TimeSpent")
                        .HasColumnType("text");

                    b.Property<int?>("TimesTaken")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuestIA.Core.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("QuestIA.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RedefinePasswordCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Option", b =>
                {
                    b.HasOne("QuestIA.Core.Models.Question", "Quest")
                        .WithMany("Options")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestIA.Core.Models.User", "User")
                        .WithMany("Options")
                        .HasForeignKey("UserId");

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Question", b =>
                {
                    b.HasOne("QuestIA.Core.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestIA.Core.Models.User", "User")
                        .WithMany("Quests")
                        .HasForeignKey("UserId");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Quiz", b =>
                {
                    b.HasOne("QuestIA.Core.Models.User", "User")
                        .WithMany("Subjects")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestIA.Core.Models.RefreshToken", b =>
                {
                    b.HasOne("QuestIA.Core.Models.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("QuestIA.Core.Models.RefreshToken", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("QuestIA.Core.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuestIA.Core.Models.User", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Quests");

                    b.Navigation("RefreshToken");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
